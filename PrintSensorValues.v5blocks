{"mode":"Blocks","workspace":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><variables><variable type=\"\" id=\"U`9aA+=)r+L1tzA.)-qi\" islocal=\"false\" iscloud=\"false\" arraylength=\"0\" arraywidth=\"0\">myVariable</variable></variables><block type=\"v5_events_when_started\" id=\".NsXwU_L.OuU1l7Sho$F\" x=\"70\" y=\"110\"><next><block type=\"v5_sensing_set_gyro_heading\" id=\"$C#cN-.azR*B|e}b7,7b\"><field name=\"GYRO\">Gyroscope</field><value name=\"VALUE\"><shadow type=\"math_number\" id=\"HzMF:7xY6}#n9z8X{vUC\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"v5_control_forever\" id=\"Sk8S:~*HX{:f64PMO*C=\"><statement name=\"SUBSTACK\"><block type=\"v5_looks_clear_all_rows\" id=\"I,E)t6}WI%l5rb0Mgh]I\"><field name=\"TARGET\">Brain</field><next><block type=\"v5_looks_set_cursor\" id=\"6FznSvem[?@8s~0~DFp[\"><field name=\"TARGET\">Brain</field><value name=\"ROW\"><shadow type=\"math_whole_number\" id=\"qIymwjqXL0bWWD90IsO;\"><field name=\"NUM\">1</field></shadow></value><value name=\"COLUMN\"><shadow type=\"math_whole_number\" id=\"7L^h;SLtUy{N84(MMvW3\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"v5_looks_print\" id=\"|TXRN|t6ylMquHA8~qdo\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">FALSE</field><value name=\"DATA\"><shadow type=\"text\" id=\"Y{j-w3D0_:mb/P?]g@Ih\"><field name=\"TEXT\">Left Tracker Reflectivity</field></shadow></value><next><block type=\"v5_looks_print\" id=\"R~eVS6cK7m]+F|kdJJ7J\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">FALSE</field><value name=\"DATA\"><shadow type=\"text\" id=\"zQZ*TpQS_:yC]6O%!QjM\"><field name=\"TEXT\">VEXcode</field></shadow><block type=\"v5_sensing_reflectivity_of\" id=\"6n+=t|NyTQN}tTpL@Jw+\"><field name=\"LINETRACKER\">LeftLineTracker</field></block></value><next><block type=\"v5_looks_set_cursor\" id=\"S{,XnYco$ckgriD6K$/|\"><field name=\"TARGET\">Brain</field><value name=\"ROW\"><shadow type=\"math_whole_number\" id=\"He{kPSW,fh{@@gnX7^-K\"><field name=\"NUM\">2</field></shadow></value><value name=\"COLUMN\"><shadow type=\"math_whole_number\" id=\"K10M0[b6-2G0Yy9QC,Rh\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"v5_looks_print\" id=\"OXS^S%m|401m:)v)3u)o\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">FALSE</field><value name=\"DATA\"><shadow type=\"text\" id=\"n3eYmb,EQWgsqKekaIoS\"><field name=\"TEXT\">Middle Tracker Reflectivity</field></shadow></value><next><block type=\"v5_looks_print\" id=\"^BfE/5ohf0YO0brIy#bh\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">FALSE</field><value name=\"DATA\"><shadow type=\"text\" id=\"Y!8Tf/Ngq34Jysl#n3#1\"><field name=\"TEXT\">VEXcode</field></shadow><block type=\"v5_sensing_reflectivity_of\" id=\"n4FPe^P)J3-`]ZIj[;!p\"><field name=\"LINETRACKER\">MiddleLineTracker</field></block></value><next><block type=\"v5_looks_set_cursor\" id=\"gv[.q40pJWka:he,~t|z\"><field name=\"TARGET\">Brain</field><value name=\"ROW\"><shadow type=\"math_whole_number\" id=\"ZQIU3yVnw2.Bqqq4c5jV\"><field name=\"NUM\">3</field></shadow></value><value name=\"COLUMN\"><shadow type=\"math_whole_number\" id=\":B~.:?*WbOqK/fzHc|M[\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"v5_looks_print\" id=\"g6HQ7UZ@ZtzHH-JQ/{UH\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">FALSE</field><value name=\"DATA\"><shadow type=\"text\" id=\"Ax~iD){ZUc9X^Ra4Zn.K\"><field name=\"TEXT\">RIght Tracker Reflectivity</field></shadow></value><next><block type=\"v5_looks_print\" id=\"-^e=D:DKT^FsTC3i5S%P\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">FALSE</field><value name=\"DATA\"><shadow type=\"text\" id=\"Y!8Tf/Ngq34Jysl#n3#1\"><field name=\"TEXT\">VEXcode</field></shadow><block type=\"v5_sensing_reflectivity_of\" id=\"|,=zz]PxO}w`]3,BPIO8\"><field name=\"LINETRACKER\">RightLineTracker</field></block></value><next><block type=\"v5_looks_set_cursor\" id=\"_bn7Z|wl4(9s{l=,qr:I\"><field name=\"TARGET\">Brain</field><value name=\"ROW\"><shadow type=\"math_whole_number\" id=\"L{iA!axIOXj7kb+j-XhI\"><field name=\"NUM\">4</field></shadow></value><value name=\"COLUMN\"><shadow type=\"math_whole_number\" id=\"T~6EzTIwn6Cu`}}A)J{#\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"v5_looks_print\" id=\"?U`:[LPrsVn.0~*B`xFo\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">FALSE</field><value name=\"DATA\"><shadow type=\"text\" id=\"|#HaD)qvYwm.B^+{2mr)\"><field name=\"TEXT\">Arm Angle in Degrees</field></shadow></value><next><block type=\"v5_looks_print\" id=\"[!)3BN1FKuj]j*q()T)^\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">FALSE</field><value name=\"DATA\"><shadow type=\"text\" id=\"Y!8Tf/Ngq34Jysl#n3#1\"><field name=\"TEXT\">VEXcode</field></shadow><block type=\"v5_sensing_angle_of\" id=\"`PT,F,Gj#D7zUyY%uY+I\"><field name=\"POTENTIOMETER\">ArmPotentiometer</field><field name=\"UNITS\">deg</field></block></value><next><block type=\"v5_looks_set_cursor\" id=\"r(O)+RWX)*T`YXI8:)ur\"><field name=\"TARGET\">Brain</field><value name=\"ROW\"><shadow type=\"math_whole_number\" id=\"/VuGv.`=_n+i[5J+A]Ik\"><field name=\"NUM\">5</field></shadow></value><value name=\"COLUMN\"><shadow type=\"math_whole_number\" id=\",U~-vk%;@T)!=j,OWnU~\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"v5_looks_print\" id=\"e|*/l7:29|7q[?{JN2W|\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">FALSE</field><value name=\"DATA\"><shadow type=\"text\" id=\"T2-MZ{/?2y[DxkukNOgm\"><field name=\"TEXT\">DistanceSensor Reading in Inches</field></shadow></value><next><block type=\"v5_looks_print\" id=\"be=qC;X:,Z{GpUPtcz:/\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">FALSE</field><value name=\"DATA\"><shadow type=\"text\" id=\"*;^CqPtI{RWC{15,eXlx\"><field name=\"TEXT\">VEXcode</field></shadow><block type=\"v5_sensing_distance_object_distance\" id=\"(eZd9s;4,)_}~A,8RPZ_\"><field name=\"DISTANCE\">DistanceSensor</field><field name=\"UNITS\">in</field></block></value><next><block type=\"v5_looks_set_cursor\" id=\"/]jbtUgit+jOkk{uRIq4\"><field name=\"TARGET\">Brain</field><value name=\"ROW\"><shadow type=\"math_whole_number\" id=\"JGGksa^LG5-2Xnyu=/J_\"><field name=\"NUM\">6</field></shadow></value><value name=\"COLUMN\"><shadow type=\"math_whole_number\" id=\"?ABrcMTk/sw{9w=X[a8C\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"v5_looks_print\" id=\"UL?vHRL;k=L(fI~AYEZ4\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">FALSE</field><value name=\"DATA\"><shadow type=\"text\" id=\"ru10a0mU|/@Tm?IWh@@w\"><field name=\"TEXT\">Inertial Sensor Heading Yaw</field></shadow></value><next><block type=\"v5_looks_print\" id=\"HZcmFI[7;l${.@_sFoxv\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">FALSE</field><value name=\"DATA\"><shadow type=\"text\" id=\"o9Kx.6LlBQ8)C2O73og@\"><field name=\"TEXT\">VEXcode</field></shadow><block type=\"v5_sensing_inertial_orientation\" id=\"7T?UDXkdM^gTbNPnKXUd\"><field name=\"INERTIAL\">InertialSensor</field><field name=\"AXIS\">yaw</field></block></value><next><block type=\"v5_control_wait\" id=\"v3YFM!}#i3V/nSQFeGoN\"><value name=\"DURATION\"><shadow type=\"math_positive_number\" id=\"P;.SHjUJU(Q;XRH)5!J(\"><field name=\"NUM\">.05</field></shadow></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block></next></block></next></block></xml>","rconfig":[{"port":[1],"name":"RightLineTracker","customName":true,"deviceType":"LineTracker","deviceClass":"line","setting":{},"triportSourcePort":22},{"port":[2],"name":"MiddleLineTracker","customName":true,"deviceType":"LineTracker","deviceClass":"line","setting":{},"triportSourcePort":22},{"port":[3],"name":"LeftLineTracker","customName":true,"deviceType":"LineTracker","deviceClass":"line","setting":{},"triportSourcePort":22},{"port":[4],"name":"ArmPotentiometer","customName":true,"deviceType":"PotentiometerV2","deviceClass":"potV2","setting":{},"triportSourcePort":22},{"port":[1],"name":"LeftDriveMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[2],"name":"RightDriveMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[3],"name":"ArmMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[5],"name":"Gyroscope","customName":true,"deviceType":"Gyro","deviceClass":"gyro","setting":{},"triportSourcePort":22},{"port":[4],"name":"DistanceSensor","customName":true,"deviceType":"Distance","deviceClass":"distance","setting":{},"triportSourcePort":22},{"port":[5],"name":"InertialSensor","customName":true,"deviceType":"Inertial","deviceClass":"inertial","setting":{},"triportSourcePort":22}],"slot":1,"platform":"V5","sdkVersion":"20220215.18.00.00","appVersion":"2.3.1","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","cppStatus":"true","cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nline RightLineTracker = line(Brain.ThreeWirePort.A);\nline MiddleLineTracker = line(Brain.ThreeWirePort.B);\nline LeftLineTracker = line(Brain.ThreeWirePort.C);\npotV2 ArmPotentiometer = potV2(Brain.ThreeWirePort.D);\nmotor LeftDriveMotor = motor(PORT1, ratio18_1, false);\n\nmotor RightDriveMotor = motor(PORT2, ratio18_1, false);\n\nmotor ArmMotor = motor(PORT3, ratio18_1, false);\n\ngyro Gyroscope = gyro(Brain.ThreeWirePort.E);\ndistance DistanceSensor = distance(PORT4);\ninertial InertialSensor = inertial(PORT5);\n\n\n\n\n// Generated code.\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nint Brain_precision = 0, Console_precision = 0;\n\nfloat myVariable;\n\n// Used to find the format string for printing numbers with the\n// desired number of decimal places\nconst char* printToBrain_numberFormat() {\n  // look at the current precision setting to find the format string\n  switch(Brain_precision){\n    case 0:  return \"%.0f\"; // 0 decimal places (1)\n    case 1:  return \"%.1f\"; // 1 decimal place  (0.1)\n    case 2:  return \"%.2f\"; // 2 decimal places (0.01)\n    case 3:  return \"%.3f\"; // 3 decimal places (0.001)\n    default: return \"%f\"; // use the print system default for everthing else\n  }\n}\n\n// \"when started\" hat block\nint whenStarted1() {\n  Gyroscope.setHeading(0.0, degrees);\n  while (true) {\n    Brain.Screen.clearScreen();\n    Brain.Screen.setCursor(1, 1);\n    Brain.Screen.print(\"Left Tracker Reflectivity\");\n    Brain.Screen.print(printToBrain_numberFormat(), static_cast<float>(LeftLineTracker.reflectivity()));\n    Brain.Screen.setCursor(2, 1);\n    Brain.Screen.print(\"Middle Tracker Reflectivity\");\n    Brain.Screen.print(printToBrain_numberFormat(), static_cast<float>(MiddleLineTracker.reflectivity()));\n    Brain.Screen.setCursor(3, 1);\n    Brain.Screen.print(\"RIght Tracker Reflectivity\");\n    Brain.Screen.print(printToBrain_numberFormat(), static_cast<float>(RightLineTracker.reflectivity()));\n    Brain.Screen.setCursor(4, 1);\n    Brain.Screen.print(\"Arm Angle in Degrees\");\n    Brain.Screen.print(printToBrain_numberFormat(), static_cast<float>(ArmPotentiometer.angle(degrees)));\n    Brain.Screen.setCursor(5, 1);\n    Brain.Screen.print(\"DistanceSensor Reading in Inches\");\n    Brain.Screen.print(printToBrain_numberFormat(), static_cast<float>(DistanceSensor.objectDistance(inches)));\n    Brain.Screen.setCursor(6, 1);\n    Brain.Screen.print(\"Inertial Sensor Heading Yaw\");\n    Brain.Screen.print(printToBrain_numberFormat(), static_cast<float>(InertialSensor.orientation(yaw, degrees)));\n    wait(0.05, seconds);\n  wait(5, msec);\n  }\n  return 0;\n}\n\n\nint main() {\n  // post event registration\n\n  // set default print color to black\n  printf(\"\\033[30m\");\n\n  // wait for rotation sensor to fully initialize\n  wait(30, msec);\n\n  whenStarted1();\n}","target":"Physical"}